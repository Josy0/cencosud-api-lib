/* tslint:disable */
/* eslint-disable */
/**
 * CencosudApiLib.Web
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AccessTokenResponse
 */
export interface AccessTokenResponse {
    /**
     * 
     * @type {string}
     * @memberof AccessTokenResponse
     */
    'tokenType'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenResponse
     */
    'accessToken': string | null;
    /**
     * 
     * @type {number}
     * @memberof AccessTokenResponse
     */
    'expiresIn': number;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenResponse
     */
    'refreshToken': string | null;
}
/**
 * 
 * @export
 * @enum {number}
 */

export const ComponentType = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7
} as const;

export type ComponentType = typeof ComponentType[keyof typeof ComponentType];


/**
 * 
 * @export
 * @interface ForgotPasswordRequest
 */
export interface ForgotPasswordRequest {
    /**
     * 
     * @type {string}
     * @memberof ForgotPasswordRequest
     */
    'email': string | null;
}
/**
 * 
 * @export
 * @interface HttpValidationProblemDetails
 */
export interface HttpValidationProblemDetails {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof HttpValidationProblemDetails
     */
    'type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HttpValidationProblemDetails
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof HttpValidationProblemDetails
     */
    'status'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof HttpValidationProblemDetails
     */
    'detail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HttpValidationProblemDetails
     */
    'instance'?: string | null;
    /**
     * 
     * @type {{ [key: string]: Array<string>; }}
     * @memberof HttpValidationProblemDetails
     */
    'errors'?: { [key: string]: Array<string>; } | null;
}
/**
 * 
 * @export
 * @interface InfoRequest
 */
export interface InfoRequest {
    /**
     * 
     * @type {string}
     * @memberof InfoRequest
     */
    'newEmail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InfoRequest
     */
    'newPassword'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InfoRequest
     */
    'oldPassword'?: string | null;
}
/**
 * 
 * @export
 * @interface InfoResponse
 */
export interface InfoResponse {
    /**
     * 
     * @type {string}
     * @memberof InfoResponse
     */
    'email': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof InfoResponse
     */
    'isEmailConfirmed': boolean;
}
/**
 * 
 * @export
 * @interface InsertApiDto
 */
export interface InsertApiDto {
    /**
     * 
     * @type {string}
     * @memberof InsertApiDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InsertApiDto
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InsertApiDto
     */
    'baseUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InsertApiDto
     */
    'version'?: string | null;
}
/**
 * 
 * @export
 * @interface InsertApiInstanceDto
 */
export interface InsertApiInstanceDto {
    /**
     * 
     * @type {string}
     * @memberof InsertApiInstanceDto
     */
    'projectId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InsertApiInstanceDto
     */
    'apiId'?: string | null;
}
/**
 * 
 * @export
 * @interface InsertComponentDto
 */
export interface InsertComponentDto {
    /**
     * 
     * @type {ComponentType}
     * @memberof InsertComponentDto
     */
    'type'?: ComponentType;
    /**
     * 
     * @type {string}
     * @memberof InsertComponentDto
     */
    'description'?: string | null;
}


/**
 * 
 * @export
 * @interface InsertComponentInstanceDto
 */
export interface InsertComponentInstanceDto {
    /**
     * 
     * @type {number}
     * @memberof InsertComponentInstanceDto
     */
    'endpointId'?: number;
    /**
     * 
     * @type {number}
     * @memberof InsertComponentInstanceDto
     */
    'componentId'?: number;
}
/**
 * 
 * @export
 * @interface InsertEndpointDto
 */
export interface InsertEndpointDto {
    /**
     * 
     * @type {string}
     * @memberof InsertEndpointDto
     */
    'apiId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InsertEndpointDto
     */
    'path'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InsertEndpointDto
     */
    'method'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InsertEndpointDto
     */
    'description'?: string | null;
}
/**
 * 
 * @export
 * @interface InsertProjectDto
 */
export interface InsertProjectDto {
    /**
     * 
     * @type {string}
     * @memberof InsertProjectDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InsertProjectDto
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InsertProjectDto
     */
    'status'?: string | null;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'email': string | null;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'password': string | null;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'twoFactorCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'twoFactorRecoveryCode'?: string | null;
}
/**
 * 
 * @export
 * @interface LoginUserDto
 */
export interface LoginUserDto {
    /**
     * 
     * @type {string}
     * @memberof LoginUserDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof LoginUserDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProblemDetails
     */
    'status'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'detail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'instance'?: string | null;
}
/**
 * 
 * @export
 * @interface ReadApiDto
 */
export interface ReadApiDto {
    /**
     * 
     * @type {number}
     * @memberof ReadApiDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ReadApiDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReadApiDto
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReadApiDto
     */
    'baseUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReadApiDto
     */
    'version'?: string | null;
}
/**
 * 
 * @export
 * @interface ReadApiInstanceDto
 */
export interface ReadApiInstanceDto {
    /**
     * 
     * @type {number}
     * @memberof ReadApiInstanceDto
     */
    'projectId'?: number;
    /**
     * 
     * @type {ReadProjectDto}
     * @memberof ReadApiInstanceDto
     */
    'project'?: ReadProjectDto;
    /**
     * 
     * @type {number}
     * @memberof ReadApiInstanceDto
     */
    'apiId'?: number;
    /**
     * 
     * @type {ReadApiDto}
     * @memberof ReadApiInstanceDto
     */
    'api'?: ReadApiDto;
}
/**
 * 
 * @export
 * @interface ReadComponentDto
 */
export interface ReadComponentDto {
    /**
     * 
     * @type {number}
     * @memberof ReadComponentDto
     */
    'id'?: number;
    /**
     * 
     * @type {ComponentType}
     * @memberof ReadComponentDto
     */
    'type'?: ComponentType;
    /**
     * 
     * @type {string}
     * @memberof ReadComponentDto
     */
    'description'?: string | null;
}


/**
 * 
 * @export
 * @interface ReadComponentInstanceDto
 */
export interface ReadComponentInstanceDto {
    /**
     * 
     * @type {number}
     * @memberof ReadComponentInstanceDto
     */
    'endpointId'?: number;
    /**
     * 
     * @type {ReadEndpointDto}
     * @memberof ReadComponentInstanceDto
     */
    'endpoint'?: ReadEndpointDto;
    /**
     * 
     * @type {number}
     * @memberof ReadComponentInstanceDto
     */
    'componentId'?: number;
    /**
     * 
     * @type {ReadComponentDto}
     * @memberof ReadComponentInstanceDto
     */
    'component'?: ReadComponentDto;
}
/**
 * 
 * @export
 * @interface ReadEndpointDto
 */
export interface ReadEndpointDto {
    /**
     * 
     * @type {number}
     * @memberof ReadEndpointDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ReadEndpointDto
     */
    'apiId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReadEndpointDto
     */
    'path'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReadEndpointDto
     */
    'method'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReadEndpointDto
     */
    'description'?: string | null;
}
/**
 * 
 * @export
 * @interface ReadProjectDto
 */
export interface ReadProjectDto {
    /**
     * 
     * @type {number}
     * @memberof ReadProjectDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ReadProjectDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReadProjectDto
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReadProjectDto
     */
    'status'?: string | null;
}
/**
 * 
 * @export
 * @interface RefreshRequest
 */
export interface RefreshRequest {
    /**
     * 
     * @type {string}
     * @memberof RefreshRequest
     */
    'refreshToken': string | null;
}
/**
 * 
 * @export
 * @interface RegisterRequest
 */
export interface RegisterRequest {
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'email': string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'password': string | null;
}
/**
 * 
 * @export
 * @interface RegisterUserDto
 */
export interface RegisterUserDto {
    /**
     * 
     * @type {string}
     * @memberof RegisterUserDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterUserDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterUserDto
     */
    'nickname'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterUserDto
     */
    'passwordConfirmation': string;
    /**
     * 
     * @type {boolean}
     * @memberof RegisterUserDto
     */
    'agreeTerms': boolean;
}
/**
 * 
 * @export
 * @interface ResendConfirmationEmailRequest
 */
export interface ResendConfirmationEmailRequest {
    /**
     * 
     * @type {string}
     * @memberof ResendConfirmationEmailRequest
     */
    'email': string | null;
}
/**
 * 
 * @export
 * @interface ResetPasswordRequest
 */
export interface ResetPasswordRequest {
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordRequest
     */
    'email': string | null;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordRequest
     */
    'resetCode': string | null;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordRequest
     */
    'newPassword': string | null;
}
/**
 * 
 * @export
 * @interface TwoFactorRequest
 */
export interface TwoFactorRequest {
    /**
     * 
     * @type {boolean}
     * @memberof TwoFactorRequest
     */
    'enable'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof TwoFactorRequest
     */
    'twoFactorCode'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof TwoFactorRequest
     */
    'resetSharedKey'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TwoFactorRequest
     */
    'resetRecoveryCodes'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TwoFactorRequest
     */
    'forgetMachine'?: boolean;
}
/**
 * 
 * @export
 * @interface TwoFactorResponse
 */
export interface TwoFactorResponse {
    /**
     * 
     * @type {string}
     * @memberof TwoFactorResponse
     */
    'sharedKey': string | null;
    /**
     * 
     * @type {number}
     * @memberof TwoFactorResponse
     */
    'recoveryCodesLeft': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof TwoFactorResponse
     */
    'recoveryCodes'?: Array<string> | null;
    /**
     * 
     * @type {boolean}
     * @memberof TwoFactorResponse
     */
    'isTwoFactorEnabled': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TwoFactorResponse
     */
    'isMachineRemembered': boolean;
}
/**
 * 
 * @export
 * @interface UpdateApiDto
 */
export interface UpdateApiDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateApiDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateApiDto
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateApiDto
     */
    'baseUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateApiDto
     */
    'version'?: string | null;
}
/**
 * 
 * @export
 * @interface UpdateComponentDto
 */
export interface UpdateComponentDto {
    /**
     * 
     * @type {ComponentType}
     * @memberof UpdateComponentDto
     */
    'type'?: ComponentType;
    /**
     * 
     * @type {string}
     * @memberof UpdateComponentDto
     */
    'description'?: string | null;
}


/**
 * 
 * @export
 * @interface UpdateEndpointDto
 */
export interface UpdateEndpointDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateEndpointDto
     */
    'path'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateEndpointDto
     */
    'method'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateEndpointDto
     */
    'description'?: string | null;
}
/**
 * 
 * @export
 * @interface UpdateProjectDto
 */
export interface UpdateProjectDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateProjectDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateProjectDto
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateProjectDto
     */
    'status'?: string | null;
}

/**
 * ApiApi - axios parameter creator
 * @export
 */
export const ApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Insere um novo item no banco de dados.
         * @param {InsertApiDto} [insertApiDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiApiCreatePost: async (insertApiDto?: InsertApiDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Api/Create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(insertApiDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Exclui um item no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Deleta um item pelo ID.
         * @param {number} [apiId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiApiDeleteDelete: async (apiId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Api/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (apiId !== undefined) {
                localVarQueryParameter['ApiId'] = apiId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Esse endpoint retorna todos os registros da entidade representada.
         * @summary Retorna uma lista de todos os itens da entidade.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiApiGetAllGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Api/GetAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Esse endpoint permite a busca de um item no banco de dados através de sua chave primária, fornecida em formato JSON. ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Retorna um item pelo ID.
         * @param {number} [apiId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiApiGetGet: async (apiId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Api/Get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (apiId !== undefined) {
                localVarQueryParameter['ApiId'] = apiId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Atualiza um item existente no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Altera informações de um item pelo ID.
         * @param {number} [apiId] 
         * @param {UpdateApiDto} [updateApiDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiApiUpdatePut: async (apiId?: number, updateApiDto?: UpdateApiDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Api/Update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (apiId !== undefined) {
                localVarQueryParameter['ApiId'] = apiId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateApiDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiApi - functional programming interface
 * @export
 */
export const ApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Insere um novo item no banco de dados.
         * @param {InsertApiDto} [insertApiDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiApiCreatePost(insertApiDto?: InsertApiDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsertApiDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiApiCreatePost(insertApiDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiApi.apiApiCreatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Exclui um item no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Deleta um item pelo ID.
         * @param {number} [apiId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiApiDeleteDelete(apiId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiApiDeleteDelete(apiId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiApi.apiApiDeleteDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Esse endpoint retorna todos os registros da entidade representada.
         * @summary Retorna uma lista de todos os itens da entidade.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiApiGetAllGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ReadApiDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiApiGetAllGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiApi.apiApiGetAllGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Esse endpoint permite a busca de um item no banco de dados através de sua chave primária, fornecida em formato JSON. ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Retorna um item pelo ID.
         * @param {number} [apiId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiApiGetGet(apiId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReadApiDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiApiGetGet(apiId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiApi.apiApiGetGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Atualiza um item existente no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Altera informações de um item pelo ID.
         * @param {number} [apiId] 
         * @param {UpdateApiDto} [updateApiDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiApiUpdatePut(apiId?: number, updateApiDto?: UpdateApiDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiApiUpdatePut(apiId, updateApiDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiApi.apiApiUpdatePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ApiApi - factory interface
 * @export
 */
export const ApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApiApiFp(configuration)
    return {
        /**
         * 
         * @summary Insere um novo item no banco de dados.
         * @param {InsertApiDto} [insertApiDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiApiCreatePost(insertApiDto?: InsertApiDto, options?: RawAxiosRequestConfig): AxiosPromise<InsertApiDto> {
            return localVarFp.apiApiCreatePost(insertApiDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Exclui um item no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Deleta um item pelo ID.
         * @param {number} [apiId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiApiDeleteDelete(apiId?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiApiDeleteDelete(apiId, options).then((request) => request(axios, basePath));
        },
        /**
         * Esse endpoint retorna todos os registros da entidade representada.
         * @summary Retorna uma lista de todos os itens da entidade.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiApiGetAllGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<ReadApiDto>> {
            return localVarFp.apiApiGetAllGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Esse endpoint permite a busca de um item no banco de dados através de sua chave primária, fornecida em formato JSON. ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Retorna um item pelo ID.
         * @param {number} [apiId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiApiGetGet(apiId?: number, options?: RawAxiosRequestConfig): AxiosPromise<ReadApiDto> {
            return localVarFp.apiApiGetGet(apiId, options).then((request) => request(axios, basePath));
        },
        /**
         * Atualiza um item existente no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Altera informações de um item pelo ID.
         * @param {number} [apiId] 
         * @param {UpdateApiDto} [updateApiDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiApiUpdatePut(apiId?: number, updateApiDto?: UpdateApiDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiApiUpdatePut(apiId, updateApiDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApiApi - object-oriented interface
 * @export
 * @class ApiApi
 * @extends {BaseAPI}
 */
export class ApiApi extends BaseAPI {
    /**
     * 
     * @summary Insere um novo item no banco de dados.
     * @param {InsertApiDto} [insertApiDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiApiCreatePost(insertApiDto?: InsertApiDto, options?: RawAxiosRequestConfig) {
        return ApiApiFp(this.configuration).apiApiCreatePost(insertApiDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Exclui um item no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
     * @summary Deleta um item pelo ID.
     * @param {number} [apiId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiApiDeleteDelete(apiId?: number, options?: RawAxiosRequestConfig) {
        return ApiApiFp(this.configuration).apiApiDeleteDelete(apiId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Esse endpoint retorna todos os registros da entidade representada.
     * @summary Retorna uma lista de todos os itens da entidade.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiApiGetAllGet(options?: RawAxiosRequestConfig) {
        return ApiApiFp(this.configuration).apiApiGetAllGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Esse endpoint permite a busca de um item no banco de dados através de sua chave primária, fornecida em formato JSON. ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
     * @summary Retorna um item pelo ID.
     * @param {number} [apiId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiApiGetGet(apiId?: number, options?: RawAxiosRequestConfig) {
        return ApiApiFp(this.configuration).apiApiGetGet(apiId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Atualiza um item existente no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
     * @summary Altera informações de um item pelo ID.
     * @param {number} [apiId] 
     * @param {UpdateApiDto} [updateApiDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiApiUpdatePut(apiId?: number, updateApiDto?: UpdateApiDto, options?: RawAxiosRequestConfig) {
        return ApiApiFp(this.configuration).apiApiUpdatePut(apiId, updateApiDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ApiInstanceApi - axios parameter creator
 * @export
 */
export const ApiInstanceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Insere um novo item no banco de dados.
         * @param {InsertApiInstanceDto} [insertApiInstanceDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiApiInstanceCreatePost: async (insertApiInstanceDto?: InsertApiInstanceDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ApiInstance/Create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(insertApiInstanceDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Exclui um item no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Deleta um item pelo ID.
         * @param {number} [projectId] 
         * @param {number} [apiId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiApiInstanceDeleteDelete: async (projectId?: number, apiId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ApiInstance/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (projectId !== undefined) {
                localVarQueryParameter['ProjectId'] = projectId;
            }

            if (apiId !== undefined) {
                localVarQueryParameter['ApiId'] = apiId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Esse endpoint retorna todos os registros da entidade representada.
         * @summary Retorna uma lista de todos os itens da entidade.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiApiInstanceGetAllGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ApiInstance/GetAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Esse endpoint permite a busca de um item no banco de dados através de sua chave primária, fornecida em formato JSON. ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Retorna um item pelo ID.
         * @param {number} [projectId] 
         * @param {number} [apiId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiApiInstanceGetGet: async (projectId?: number, apiId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ApiInstance/Get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (projectId !== undefined) {
                localVarQueryParameter['ProjectId'] = projectId;
            }

            if (apiId !== undefined) {
                localVarQueryParameter['ApiId'] = apiId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Atualiza um item existente no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Altera informações de um item pelo ID.
         * @param {number} [projectId] 
         * @param {number} [apiId] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiApiInstanceUpdatePut: async (projectId?: number, apiId?: number, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ApiInstance/Update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (projectId !== undefined) {
                localVarQueryParameter['ProjectId'] = projectId;
            }

            if (apiId !== undefined) {
                localVarQueryParameter['ApiId'] = apiId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiInstanceApi - functional programming interface
 * @export
 */
export const ApiInstanceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApiInstanceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Insere um novo item no banco de dados.
         * @param {InsertApiInstanceDto} [insertApiInstanceDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiApiInstanceCreatePost(insertApiInstanceDto?: InsertApiInstanceDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsertApiInstanceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiApiInstanceCreatePost(insertApiInstanceDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiInstanceApi.apiApiInstanceCreatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Exclui um item no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Deleta um item pelo ID.
         * @param {number} [projectId] 
         * @param {number} [apiId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiApiInstanceDeleteDelete(projectId?: number, apiId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiApiInstanceDeleteDelete(projectId, apiId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiInstanceApi.apiApiInstanceDeleteDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Esse endpoint retorna todos os registros da entidade representada.
         * @summary Retorna uma lista de todos os itens da entidade.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiApiInstanceGetAllGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ReadApiInstanceDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiApiInstanceGetAllGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiInstanceApi.apiApiInstanceGetAllGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Esse endpoint permite a busca de um item no banco de dados através de sua chave primária, fornecida em formato JSON. ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Retorna um item pelo ID.
         * @param {number} [projectId] 
         * @param {number} [apiId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiApiInstanceGetGet(projectId?: number, apiId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReadApiInstanceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiApiInstanceGetGet(projectId, apiId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiInstanceApi.apiApiInstanceGetGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Atualiza um item existente no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Altera informações de um item pelo ID.
         * @param {number} [projectId] 
         * @param {number} [apiId] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiApiInstanceUpdatePut(projectId?: number, apiId?: number, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiApiInstanceUpdatePut(projectId, apiId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiInstanceApi.apiApiInstanceUpdatePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ApiInstanceApi - factory interface
 * @export
 */
export const ApiInstanceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApiInstanceApiFp(configuration)
    return {
        /**
         * 
         * @summary Insere um novo item no banco de dados.
         * @param {InsertApiInstanceDto} [insertApiInstanceDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiApiInstanceCreatePost(insertApiInstanceDto?: InsertApiInstanceDto, options?: RawAxiosRequestConfig): AxiosPromise<InsertApiInstanceDto> {
            return localVarFp.apiApiInstanceCreatePost(insertApiInstanceDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Exclui um item no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Deleta um item pelo ID.
         * @param {number} [projectId] 
         * @param {number} [apiId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiApiInstanceDeleteDelete(projectId?: number, apiId?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiApiInstanceDeleteDelete(projectId, apiId, options).then((request) => request(axios, basePath));
        },
        /**
         * Esse endpoint retorna todos os registros da entidade representada.
         * @summary Retorna uma lista de todos os itens da entidade.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiApiInstanceGetAllGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<ReadApiInstanceDto>> {
            return localVarFp.apiApiInstanceGetAllGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Esse endpoint permite a busca de um item no banco de dados através de sua chave primária, fornecida em formato JSON. ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Retorna um item pelo ID.
         * @param {number} [projectId] 
         * @param {number} [apiId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiApiInstanceGetGet(projectId?: number, apiId?: number, options?: RawAxiosRequestConfig): AxiosPromise<ReadApiInstanceDto> {
            return localVarFp.apiApiInstanceGetGet(projectId, apiId, options).then((request) => request(axios, basePath));
        },
        /**
         * Atualiza um item existente no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Altera informações de um item pelo ID.
         * @param {number} [projectId] 
         * @param {number} [apiId] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiApiInstanceUpdatePut(projectId?: number, apiId?: number, body?: object, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiApiInstanceUpdatePut(projectId, apiId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApiInstanceApi - object-oriented interface
 * @export
 * @class ApiInstanceApi
 * @extends {BaseAPI}
 */
export class ApiInstanceApi extends BaseAPI {
    /**
     * 
     * @summary Insere um novo item no banco de dados.
     * @param {InsertApiInstanceDto} [insertApiInstanceDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiInstanceApi
     */
    public apiApiInstanceCreatePost(insertApiInstanceDto?: InsertApiInstanceDto, options?: RawAxiosRequestConfig) {
        return ApiInstanceApiFp(this.configuration).apiApiInstanceCreatePost(insertApiInstanceDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Exclui um item no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
     * @summary Deleta um item pelo ID.
     * @param {number} [projectId] 
     * @param {number} [apiId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiInstanceApi
     */
    public apiApiInstanceDeleteDelete(projectId?: number, apiId?: number, options?: RawAxiosRequestConfig) {
        return ApiInstanceApiFp(this.configuration).apiApiInstanceDeleteDelete(projectId, apiId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Esse endpoint retorna todos os registros da entidade representada.
     * @summary Retorna uma lista de todos os itens da entidade.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiInstanceApi
     */
    public apiApiInstanceGetAllGet(options?: RawAxiosRequestConfig) {
        return ApiInstanceApiFp(this.configuration).apiApiInstanceGetAllGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Esse endpoint permite a busca de um item no banco de dados através de sua chave primária, fornecida em formato JSON. ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
     * @summary Retorna um item pelo ID.
     * @param {number} [projectId] 
     * @param {number} [apiId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiInstanceApi
     */
    public apiApiInstanceGetGet(projectId?: number, apiId?: number, options?: RawAxiosRequestConfig) {
        return ApiInstanceApiFp(this.configuration).apiApiInstanceGetGet(projectId, apiId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Atualiza um item existente no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
     * @summary Altera informações de um item pelo ID.
     * @param {number} [projectId] 
     * @param {number} [apiId] 
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiInstanceApi
     */
    public apiApiInstanceUpdatePut(projectId?: number, apiId?: number, body?: object, options?: RawAxiosRequestConfig) {
        return ApiInstanceApiFp(this.configuration).apiApiInstanceUpdatePut(projectId, apiId, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CencosudApiLibWebApi - axios parameter creator
 * @export
 */
export const CencosudApiLibWebApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ForgotPasswordRequest} [forgotPasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPasswordPost: async (forgotPasswordRequest?: ForgotPasswordRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/forgotPassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(forgotPasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {boolean} [useCookies] 
         * @param {boolean} [useSessionCookies] 
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost: async (useCookies?: boolean, useSessionCookies?: boolean, loginRequest?: LoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (useCookies !== undefined) {
                localVarQueryParameter['useCookies'] = useCookies;
            }

            if (useSessionCookies !== undefined) {
                localVarQueryParameter['useSessionCookies'] = useSessionCookies;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TwoFactorRequest} [twoFactorRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manage2faPost: async (twoFactorRequest?: TwoFactorRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/manage/2fa`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(twoFactorRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manageInfoGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/manage/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InfoRequest} [infoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manageInfoPost: async (infoRequest?: InfoRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/manage/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(infoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [code] 
         * @param {string} [changedEmail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mapIdentityApiConfirmEmail: async (userId?: string, code?: string, changedEmail?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/confirmEmail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (changedEmail !== undefined) {
                localVarQueryParameter['changedEmail'] = changedEmail;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RefreshRequest} [refreshRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshPost: async (refreshRequest?: RefreshRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refreshRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterRequest} [registerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerPost: async (registerRequest?: RegisterRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResendConfirmationEmailRequest} [resendConfirmationEmailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendConfirmationEmailPost: async (resendConfirmationEmailRequest?: ResendConfirmationEmailRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/resendConfirmationEmail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resendConfirmationEmailRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResetPasswordRequest} [resetPasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordPost: async (resetPasswordRequest?: ResetPasswordRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/resetPassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resetPasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CencosudApiLibWebApi - functional programming interface
 * @export
 */
export const CencosudApiLibWebApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CencosudApiLibWebApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ForgotPasswordRequest} [forgotPasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async forgotPasswordPost(forgotPasswordRequest?: ForgotPasswordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.forgotPasswordPost(forgotPasswordRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CencosudApiLibWebApi.forgotPasswordPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {boolean} [useCookies] 
         * @param {boolean} [useSessionCookies] 
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginPost(useCookies?: boolean, useSessionCookies?: boolean, loginRequest?: LoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginPost(useCookies, useSessionCookies, loginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CencosudApiLibWebApi.loginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {TwoFactorRequest} [twoFactorRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async manage2faPost(twoFactorRequest?: TwoFactorRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TwoFactorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.manage2faPost(twoFactorRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CencosudApiLibWebApi.manage2faPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async manageInfoGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.manageInfoGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CencosudApiLibWebApi.manageInfoGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {InfoRequest} [infoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async manageInfoPost(infoRequest?: InfoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.manageInfoPost(infoRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CencosudApiLibWebApi.manageInfoPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [code] 
         * @param {string} [changedEmail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mapIdentityApiConfirmEmail(userId?: string, code?: string, changedEmail?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mapIdentityApiConfirmEmail(userId, code, changedEmail, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CencosudApiLibWebApi.mapIdentityApiConfirmEmail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RefreshRequest} [refreshRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshPost(refreshRequest?: RefreshRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshPost(refreshRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CencosudApiLibWebApi.refreshPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RegisterRequest} [registerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerPost(registerRequest?: RegisterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerPost(registerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CencosudApiLibWebApi.registerPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ResendConfirmationEmailRequest} [resendConfirmationEmailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resendConfirmationEmailPost(resendConfirmationEmailRequest?: ResendConfirmationEmailRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resendConfirmationEmailPost(resendConfirmationEmailRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CencosudApiLibWebApi.resendConfirmationEmailPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ResetPasswordRequest} [resetPasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPasswordPost(resetPasswordRequest?: ResetPasswordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPasswordPost(resetPasswordRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CencosudApiLibWebApi.resetPasswordPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CencosudApiLibWebApi - factory interface
 * @export
 */
export const CencosudApiLibWebApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CencosudApiLibWebApiFp(configuration)
    return {
        /**
         * 
         * @param {ForgotPasswordRequest} [forgotPasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPasswordPost(forgotPasswordRequest?: ForgotPasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.forgotPasswordPost(forgotPasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {boolean} [useCookies] 
         * @param {boolean} [useSessionCookies] 
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost(useCookies?: boolean, useSessionCookies?: boolean, loginRequest?: LoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<AccessTokenResponse> {
            return localVarFp.loginPost(useCookies, useSessionCookies, loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TwoFactorRequest} [twoFactorRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manage2faPost(twoFactorRequest?: TwoFactorRequest, options?: RawAxiosRequestConfig): AxiosPromise<TwoFactorResponse> {
            return localVarFp.manage2faPost(twoFactorRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manageInfoGet(options?: RawAxiosRequestConfig): AxiosPromise<InfoResponse> {
            return localVarFp.manageInfoGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InfoRequest} [infoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manageInfoPost(infoRequest?: InfoRequest, options?: RawAxiosRequestConfig): AxiosPromise<InfoResponse> {
            return localVarFp.manageInfoPost(infoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [code] 
         * @param {string} [changedEmail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mapIdentityApiConfirmEmail(userId?: string, code?: string, changedEmail?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.mapIdentityApiConfirmEmail(userId, code, changedEmail, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RefreshRequest} [refreshRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshPost(refreshRequest?: RefreshRequest, options?: RawAxiosRequestConfig): AxiosPromise<AccessTokenResponse> {
            return localVarFp.refreshPost(refreshRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterRequest} [registerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerPost(registerRequest?: RegisterRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.registerPost(registerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResendConfirmationEmailRequest} [resendConfirmationEmailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendConfirmationEmailPost(resendConfirmationEmailRequest?: ResendConfirmationEmailRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.resendConfirmationEmailPost(resendConfirmationEmailRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResetPasswordRequest} [resetPasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordPost(resetPasswordRequest?: ResetPasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.resetPasswordPost(resetPasswordRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CencosudApiLibWebApi - object-oriented interface
 * @export
 * @class CencosudApiLibWebApi
 * @extends {BaseAPI}
 */
export class CencosudApiLibWebApi extends BaseAPI {
    /**
     * 
     * @param {ForgotPasswordRequest} [forgotPasswordRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CencosudApiLibWebApi
     */
    public forgotPasswordPost(forgotPasswordRequest?: ForgotPasswordRequest, options?: RawAxiosRequestConfig) {
        return CencosudApiLibWebApiFp(this.configuration).forgotPasswordPost(forgotPasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {boolean} [useCookies] 
     * @param {boolean} [useSessionCookies] 
     * @param {LoginRequest} [loginRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CencosudApiLibWebApi
     */
    public loginPost(useCookies?: boolean, useSessionCookies?: boolean, loginRequest?: LoginRequest, options?: RawAxiosRequestConfig) {
        return CencosudApiLibWebApiFp(this.configuration).loginPost(useCookies, useSessionCookies, loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TwoFactorRequest} [twoFactorRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CencosudApiLibWebApi
     */
    public manage2faPost(twoFactorRequest?: TwoFactorRequest, options?: RawAxiosRequestConfig) {
        return CencosudApiLibWebApiFp(this.configuration).manage2faPost(twoFactorRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CencosudApiLibWebApi
     */
    public manageInfoGet(options?: RawAxiosRequestConfig) {
        return CencosudApiLibWebApiFp(this.configuration).manageInfoGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InfoRequest} [infoRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CencosudApiLibWebApi
     */
    public manageInfoPost(infoRequest?: InfoRequest, options?: RawAxiosRequestConfig) {
        return CencosudApiLibWebApiFp(this.configuration).manageInfoPost(infoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [userId] 
     * @param {string} [code] 
     * @param {string} [changedEmail] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CencosudApiLibWebApi
     */
    public mapIdentityApiConfirmEmail(userId?: string, code?: string, changedEmail?: string, options?: RawAxiosRequestConfig) {
        return CencosudApiLibWebApiFp(this.configuration).mapIdentityApiConfirmEmail(userId, code, changedEmail, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RefreshRequest} [refreshRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CencosudApiLibWebApi
     */
    public refreshPost(refreshRequest?: RefreshRequest, options?: RawAxiosRequestConfig) {
        return CencosudApiLibWebApiFp(this.configuration).refreshPost(refreshRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterRequest} [registerRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CencosudApiLibWebApi
     */
    public registerPost(registerRequest?: RegisterRequest, options?: RawAxiosRequestConfig) {
        return CencosudApiLibWebApiFp(this.configuration).registerPost(registerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResendConfirmationEmailRequest} [resendConfirmationEmailRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CencosudApiLibWebApi
     */
    public resendConfirmationEmailPost(resendConfirmationEmailRequest?: ResendConfirmationEmailRequest, options?: RawAxiosRequestConfig) {
        return CencosudApiLibWebApiFp(this.configuration).resendConfirmationEmailPost(resendConfirmationEmailRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResetPasswordRequest} [resetPasswordRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CencosudApiLibWebApi
     */
    public resetPasswordPost(resetPasswordRequest?: ResetPasswordRequest, options?: RawAxiosRequestConfig) {
        return CencosudApiLibWebApiFp(this.configuration).resetPasswordPost(resetPasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ComponentApi - axios parameter creator
 * @export
 */
export const ComponentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Insere um novo item no banco de dados.
         * @param {InsertComponentDto} [insertComponentDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiComponentCreatePost: async (insertComponentDto?: InsertComponentDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Component/Create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(insertComponentDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Exclui um item no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Deleta um item pelo ID.
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiComponentDeleteDelete: async (id?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Component/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Esse endpoint retorna todos os registros da entidade representada.
         * @summary Retorna uma lista de todos os itens da entidade.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiComponentGetAllGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Component/GetAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Esse endpoint permite a busca de um item no banco de dados através de sua chave primária, fornecida em formato JSON. ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Retorna um item pelo ID.
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiComponentGetGet: async (id?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Component/Get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Atualiza um item existente no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Altera informações de um item pelo ID.
         * @param {number} [id] 
         * @param {UpdateComponentDto} [updateComponentDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiComponentUpdatePut: async (id?: number, updateComponentDto?: UpdateComponentDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Component/Update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateComponentDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ComponentApi - functional programming interface
 * @export
 */
export const ComponentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ComponentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Insere um novo item no banco de dados.
         * @param {InsertComponentDto} [insertComponentDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiComponentCreatePost(insertComponentDto?: InsertComponentDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsertComponentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiComponentCreatePost(insertComponentDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ComponentApi.apiComponentCreatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Exclui um item no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Deleta um item pelo ID.
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiComponentDeleteDelete(id?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiComponentDeleteDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ComponentApi.apiComponentDeleteDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Esse endpoint retorna todos os registros da entidade representada.
         * @summary Retorna uma lista de todos os itens da entidade.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiComponentGetAllGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ReadComponentDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiComponentGetAllGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ComponentApi.apiComponentGetAllGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Esse endpoint permite a busca de um item no banco de dados através de sua chave primária, fornecida em formato JSON. ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Retorna um item pelo ID.
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiComponentGetGet(id?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReadComponentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiComponentGetGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ComponentApi.apiComponentGetGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Atualiza um item existente no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Altera informações de um item pelo ID.
         * @param {number} [id] 
         * @param {UpdateComponentDto} [updateComponentDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiComponentUpdatePut(id?: number, updateComponentDto?: UpdateComponentDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiComponentUpdatePut(id, updateComponentDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ComponentApi.apiComponentUpdatePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ComponentApi - factory interface
 * @export
 */
export const ComponentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ComponentApiFp(configuration)
    return {
        /**
         * 
         * @summary Insere um novo item no banco de dados.
         * @param {InsertComponentDto} [insertComponentDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiComponentCreatePost(insertComponentDto?: InsertComponentDto, options?: RawAxiosRequestConfig): AxiosPromise<InsertComponentDto> {
            return localVarFp.apiComponentCreatePost(insertComponentDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Exclui um item no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Deleta um item pelo ID.
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiComponentDeleteDelete(id?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiComponentDeleteDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Esse endpoint retorna todos os registros da entidade representada.
         * @summary Retorna uma lista de todos os itens da entidade.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiComponentGetAllGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<ReadComponentDto>> {
            return localVarFp.apiComponentGetAllGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Esse endpoint permite a busca de um item no banco de dados através de sua chave primária, fornecida em formato JSON. ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Retorna um item pelo ID.
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiComponentGetGet(id?: number, options?: RawAxiosRequestConfig): AxiosPromise<ReadComponentDto> {
            return localVarFp.apiComponentGetGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Atualiza um item existente no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Altera informações de um item pelo ID.
         * @param {number} [id] 
         * @param {UpdateComponentDto} [updateComponentDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiComponentUpdatePut(id?: number, updateComponentDto?: UpdateComponentDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiComponentUpdatePut(id, updateComponentDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ComponentApi - object-oriented interface
 * @export
 * @class ComponentApi
 * @extends {BaseAPI}
 */
export class ComponentApi extends BaseAPI {
    /**
     * 
     * @summary Insere um novo item no banco de dados.
     * @param {InsertComponentDto} [insertComponentDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentApi
     */
    public apiComponentCreatePost(insertComponentDto?: InsertComponentDto, options?: RawAxiosRequestConfig) {
        return ComponentApiFp(this.configuration).apiComponentCreatePost(insertComponentDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Exclui um item no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
     * @summary Deleta um item pelo ID.
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentApi
     */
    public apiComponentDeleteDelete(id?: number, options?: RawAxiosRequestConfig) {
        return ComponentApiFp(this.configuration).apiComponentDeleteDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Esse endpoint retorna todos os registros da entidade representada.
     * @summary Retorna uma lista de todos os itens da entidade.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentApi
     */
    public apiComponentGetAllGet(options?: RawAxiosRequestConfig) {
        return ComponentApiFp(this.configuration).apiComponentGetAllGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Esse endpoint permite a busca de um item no banco de dados através de sua chave primária, fornecida em formato JSON. ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
     * @summary Retorna um item pelo ID.
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentApi
     */
    public apiComponentGetGet(id?: number, options?: RawAxiosRequestConfig) {
        return ComponentApiFp(this.configuration).apiComponentGetGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Atualiza um item existente no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
     * @summary Altera informações de um item pelo ID.
     * @param {number} [id] 
     * @param {UpdateComponentDto} [updateComponentDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentApi
     */
    public apiComponentUpdatePut(id?: number, updateComponentDto?: UpdateComponentDto, options?: RawAxiosRequestConfig) {
        return ComponentApiFp(this.configuration).apiComponentUpdatePut(id, updateComponentDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ComponentInstanceApi - axios parameter creator
 * @export
 */
export const ComponentInstanceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Insere um novo item no banco de dados.
         * @param {InsertComponentInstanceDto} [insertComponentInstanceDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiComponentInstanceCreatePost: async (insertComponentInstanceDto?: InsertComponentInstanceDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ComponentInstance/Create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(insertComponentInstanceDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Exclui um item no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Deleta um item pelo ID.
         * @param {number} [endpointId] 
         * @param {number} [componentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiComponentInstanceDeleteDelete: async (endpointId?: number, componentId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ComponentInstance/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (endpointId !== undefined) {
                localVarQueryParameter['EndpointId'] = endpointId;
            }

            if (componentId !== undefined) {
                localVarQueryParameter['ComponentId'] = componentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Esse endpoint retorna todos os registros da entidade representada.
         * @summary Retorna uma lista de todos os itens da entidade.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiComponentInstanceGetAllGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ComponentInstance/GetAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Esse endpoint permite a busca de um item no banco de dados através de sua chave primária, fornecida em formato JSON. ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Retorna um item pelo ID.
         * @param {number} [endpointId] 
         * @param {number} [componentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiComponentInstanceGetGet: async (endpointId?: number, componentId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ComponentInstance/Get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (endpointId !== undefined) {
                localVarQueryParameter['EndpointId'] = endpointId;
            }

            if (componentId !== undefined) {
                localVarQueryParameter['ComponentId'] = componentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Atualiza um item existente no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Altera informações de um item pelo ID.
         * @param {number} [endpointId] 
         * @param {number} [componentId] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiComponentInstanceUpdatePut: async (endpointId?: number, componentId?: number, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ComponentInstance/Update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (endpointId !== undefined) {
                localVarQueryParameter['EndpointId'] = endpointId;
            }

            if (componentId !== undefined) {
                localVarQueryParameter['ComponentId'] = componentId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ComponentInstanceApi - functional programming interface
 * @export
 */
export const ComponentInstanceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ComponentInstanceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Insere um novo item no banco de dados.
         * @param {InsertComponentInstanceDto} [insertComponentInstanceDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiComponentInstanceCreatePost(insertComponentInstanceDto?: InsertComponentInstanceDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsertComponentInstanceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiComponentInstanceCreatePost(insertComponentInstanceDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ComponentInstanceApi.apiComponentInstanceCreatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Exclui um item no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Deleta um item pelo ID.
         * @param {number} [endpointId] 
         * @param {number} [componentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiComponentInstanceDeleteDelete(endpointId?: number, componentId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiComponentInstanceDeleteDelete(endpointId, componentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ComponentInstanceApi.apiComponentInstanceDeleteDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Esse endpoint retorna todos os registros da entidade representada.
         * @summary Retorna uma lista de todos os itens da entidade.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiComponentInstanceGetAllGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ReadComponentInstanceDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiComponentInstanceGetAllGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ComponentInstanceApi.apiComponentInstanceGetAllGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Esse endpoint permite a busca de um item no banco de dados através de sua chave primária, fornecida em formato JSON. ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Retorna um item pelo ID.
         * @param {number} [endpointId] 
         * @param {number} [componentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiComponentInstanceGetGet(endpointId?: number, componentId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReadComponentInstanceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiComponentInstanceGetGet(endpointId, componentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ComponentInstanceApi.apiComponentInstanceGetGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Atualiza um item existente no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Altera informações de um item pelo ID.
         * @param {number} [endpointId] 
         * @param {number} [componentId] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiComponentInstanceUpdatePut(endpointId?: number, componentId?: number, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiComponentInstanceUpdatePut(endpointId, componentId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ComponentInstanceApi.apiComponentInstanceUpdatePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ComponentInstanceApi - factory interface
 * @export
 */
export const ComponentInstanceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ComponentInstanceApiFp(configuration)
    return {
        /**
         * 
         * @summary Insere um novo item no banco de dados.
         * @param {InsertComponentInstanceDto} [insertComponentInstanceDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiComponentInstanceCreatePost(insertComponentInstanceDto?: InsertComponentInstanceDto, options?: RawAxiosRequestConfig): AxiosPromise<InsertComponentInstanceDto> {
            return localVarFp.apiComponentInstanceCreatePost(insertComponentInstanceDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Exclui um item no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Deleta um item pelo ID.
         * @param {number} [endpointId] 
         * @param {number} [componentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiComponentInstanceDeleteDelete(endpointId?: number, componentId?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiComponentInstanceDeleteDelete(endpointId, componentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Esse endpoint retorna todos os registros da entidade representada.
         * @summary Retorna uma lista de todos os itens da entidade.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiComponentInstanceGetAllGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<ReadComponentInstanceDto>> {
            return localVarFp.apiComponentInstanceGetAllGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Esse endpoint permite a busca de um item no banco de dados através de sua chave primária, fornecida em formato JSON. ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Retorna um item pelo ID.
         * @param {number} [endpointId] 
         * @param {number} [componentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiComponentInstanceGetGet(endpointId?: number, componentId?: number, options?: RawAxiosRequestConfig): AxiosPromise<ReadComponentInstanceDto> {
            return localVarFp.apiComponentInstanceGetGet(endpointId, componentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Atualiza um item existente no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Altera informações de um item pelo ID.
         * @param {number} [endpointId] 
         * @param {number} [componentId] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiComponentInstanceUpdatePut(endpointId?: number, componentId?: number, body?: object, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiComponentInstanceUpdatePut(endpointId, componentId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ComponentInstanceApi - object-oriented interface
 * @export
 * @class ComponentInstanceApi
 * @extends {BaseAPI}
 */
export class ComponentInstanceApi extends BaseAPI {
    /**
     * 
     * @summary Insere um novo item no banco de dados.
     * @param {InsertComponentInstanceDto} [insertComponentInstanceDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentInstanceApi
     */
    public apiComponentInstanceCreatePost(insertComponentInstanceDto?: InsertComponentInstanceDto, options?: RawAxiosRequestConfig) {
        return ComponentInstanceApiFp(this.configuration).apiComponentInstanceCreatePost(insertComponentInstanceDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Exclui um item no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
     * @summary Deleta um item pelo ID.
     * @param {number} [endpointId] 
     * @param {number} [componentId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentInstanceApi
     */
    public apiComponentInstanceDeleteDelete(endpointId?: number, componentId?: number, options?: RawAxiosRequestConfig) {
        return ComponentInstanceApiFp(this.configuration).apiComponentInstanceDeleteDelete(endpointId, componentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Esse endpoint retorna todos os registros da entidade representada.
     * @summary Retorna uma lista de todos os itens da entidade.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentInstanceApi
     */
    public apiComponentInstanceGetAllGet(options?: RawAxiosRequestConfig) {
        return ComponentInstanceApiFp(this.configuration).apiComponentInstanceGetAllGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Esse endpoint permite a busca de um item no banco de dados através de sua chave primária, fornecida em formato JSON. ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
     * @summary Retorna um item pelo ID.
     * @param {number} [endpointId] 
     * @param {number} [componentId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentInstanceApi
     */
    public apiComponentInstanceGetGet(endpointId?: number, componentId?: number, options?: RawAxiosRequestConfig) {
        return ComponentInstanceApiFp(this.configuration).apiComponentInstanceGetGet(endpointId, componentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Atualiza um item existente no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
     * @summary Altera informações de um item pelo ID.
     * @param {number} [endpointId] 
     * @param {number} [componentId] 
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentInstanceApi
     */
    public apiComponentInstanceUpdatePut(endpointId?: number, componentId?: number, body?: object, options?: RawAxiosRequestConfig) {
        return ComponentInstanceApiFp(this.configuration).apiComponentInstanceUpdatePut(endpointId, componentId, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EndpointApi - axios parameter creator
 * @export
 */
export const EndpointApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Insere um novo item no banco de dados.
         * @param {InsertEndpointDto} [insertEndpointDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEndpointCreatePost: async (insertEndpointDto?: InsertEndpointDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Endpoint/Create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(insertEndpointDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Exclui um item no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Deleta um item pelo ID.
         * @param {number} [endpointId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEndpointDeleteDelete: async (endpointId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Endpoint/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (endpointId !== undefined) {
                localVarQueryParameter['EndpointId'] = endpointId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Esse endpoint retorna todos os registros da entidade representada.
         * @summary Retorna uma lista de todos os itens da entidade.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEndpointGetAllGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Endpoint/GetAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Esse endpoint permite a busca de um item no banco de dados através de sua chave primária, fornecida em formato JSON. ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Retorna um item pelo ID.
         * @param {number} [endpointId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEndpointGetGet: async (endpointId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Endpoint/Get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (endpointId !== undefined) {
                localVarQueryParameter['EndpointId'] = endpointId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Atualiza um item existente no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Altera informações de um item pelo ID.
         * @param {number} [endpointId] 
         * @param {UpdateEndpointDto} [updateEndpointDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEndpointUpdatePut: async (endpointId?: number, updateEndpointDto?: UpdateEndpointDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Endpoint/Update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (endpointId !== undefined) {
                localVarQueryParameter['EndpointId'] = endpointId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateEndpointDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EndpointApi - functional programming interface
 * @export
 */
export const EndpointApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EndpointApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Insere um novo item no banco de dados.
         * @param {InsertEndpointDto} [insertEndpointDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEndpointCreatePost(insertEndpointDto?: InsertEndpointDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsertEndpointDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEndpointCreatePost(insertEndpointDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EndpointApi.apiEndpointCreatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Exclui um item no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Deleta um item pelo ID.
         * @param {number} [endpointId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEndpointDeleteDelete(endpointId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEndpointDeleteDelete(endpointId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EndpointApi.apiEndpointDeleteDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Esse endpoint retorna todos os registros da entidade representada.
         * @summary Retorna uma lista de todos os itens da entidade.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEndpointGetAllGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ReadEndpointDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEndpointGetAllGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EndpointApi.apiEndpointGetAllGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Esse endpoint permite a busca de um item no banco de dados através de sua chave primária, fornecida em formato JSON. ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Retorna um item pelo ID.
         * @param {number} [endpointId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEndpointGetGet(endpointId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReadEndpointDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEndpointGetGet(endpointId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EndpointApi.apiEndpointGetGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Atualiza um item existente no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Altera informações de um item pelo ID.
         * @param {number} [endpointId] 
         * @param {UpdateEndpointDto} [updateEndpointDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEndpointUpdatePut(endpointId?: number, updateEndpointDto?: UpdateEndpointDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEndpointUpdatePut(endpointId, updateEndpointDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EndpointApi.apiEndpointUpdatePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EndpointApi - factory interface
 * @export
 */
export const EndpointApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EndpointApiFp(configuration)
    return {
        /**
         * 
         * @summary Insere um novo item no banco de dados.
         * @param {InsertEndpointDto} [insertEndpointDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEndpointCreatePost(insertEndpointDto?: InsertEndpointDto, options?: RawAxiosRequestConfig): AxiosPromise<InsertEndpointDto> {
            return localVarFp.apiEndpointCreatePost(insertEndpointDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Exclui um item no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Deleta um item pelo ID.
         * @param {number} [endpointId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEndpointDeleteDelete(endpointId?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiEndpointDeleteDelete(endpointId, options).then((request) => request(axios, basePath));
        },
        /**
         * Esse endpoint retorna todos os registros da entidade representada.
         * @summary Retorna uma lista de todos os itens da entidade.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEndpointGetAllGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<ReadEndpointDto>> {
            return localVarFp.apiEndpointGetAllGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Esse endpoint permite a busca de um item no banco de dados através de sua chave primária, fornecida em formato JSON. ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Retorna um item pelo ID.
         * @param {number} [endpointId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEndpointGetGet(endpointId?: number, options?: RawAxiosRequestConfig): AxiosPromise<ReadEndpointDto> {
            return localVarFp.apiEndpointGetGet(endpointId, options).then((request) => request(axios, basePath));
        },
        /**
         * Atualiza um item existente no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Altera informações de um item pelo ID.
         * @param {number} [endpointId] 
         * @param {UpdateEndpointDto} [updateEndpointDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEndpointUpdatePut(endpointId?: number, updateEndpointDto?: UpdateEndpointDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiEndpointUpdatePut(endpointId, updateEndpointDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EndpointApi - object-oriented interface
 * @export
 * @class EndpointApi
 * @extends {BaseAPI}
 */
export class EndpointApi extends BaseAPI {
    /**
     * 
     * @summary Insere um novo item no banco de dados.
     * @param {InsertEndpointDto} [insertEndpointDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointApi
     */
    public apiEndpointCreatePost(insertEndpointDto?: InsertEndpointDto, options?: RawAxiosRequestConfig) {
        return EndpointApiFp(this.configuration).apiEndpointCreatePost(insertEndpointDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Exclui um item no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
     * @summary Deleta um item pelo ID.
     * @param {number} [endpointId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointApi
     */
    public apiEndpointDeleteDelete(endpointId?: number, options?: RawAxiosRequestConfig) {
        return EndpointApiFp(this.configuration).apiEndpointDeleteDelete(endpointId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Esse endpoint retorna todos os registros da entidade representada.
     * @summary Retorna uma lista de todos os itens da entidade.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointApi
     */
    public apiEndpointGetAllGet(options?: RawAxiosRequestConfig) {
        return EndpointApiFp(this.configuration).apiEndpointGetAllGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Esse endpoint permite a busca de um item no banco de dados através de sua chave primária, fornecida em formato JSON. ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
     * @summary Retorna um item pelo ID.
     * @param {number} [endpointId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointApi
     */
    public apiEndpointGetGet(endpointId?: number, options?: RawAxiosRequestConfig) {
        return EndpointApiFp(this.configuration).apiEndpointGetGet(endpointId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Atualiza um item existente no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
     * @summary Altera informações de um item pelo ID.
     * @param {number} [endpointId] 
     * @param {UpdateEndpointDto} [updateEndpointDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointApi
     */
    public apiEndpointUpdatePut(endpointId?: number, updateEndpointDto?: UpdateEndpointDto, options?: RawAxiosRequestConfig) {
        return EndpointApiFp(this.configuration).apiEndpointUpdatePut(endpointId, updateEndpointDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProjectApi - axios parameter creator
 * @export
 */
export const ProjectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Insere um novo item no banco de dados.
         * @param {InsertProjectDto} [insertProjectDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectCreatePost: async (insertProjectDto?: InsertProjectDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Project/Create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(insertProjectDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Exclui um item no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Deleta um item pelo ID.
         * @param {number} [projectId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectDeleteDelete: async (projectId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Project/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (projectId !== undefined) {
                localVarQueryParameter['ProjectId'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Esse endpoint retorna todos os registros da entidade representada.
         * @summary Retorna uma lista de todos os itens da entidade.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectGetAllGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Project/GetAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [projectId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectGetApiInstancesGet: async (projectId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Project/GetApiInstances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (projectId !== undefined) {
                localVarQueryParameter['projectId'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Esse endpoint permite a busca de um item no banco de dados através de sua chave primária, fornecida em formato JSON. ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Retorna um item pelo ID.
         * @param {number} [projectId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectGetGet: async (projectId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Project/Get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (projectId !== undefined) {
                localVarQueryParameter['ProjectId'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Atualiza um item existente no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Altera informações de um item pelo ID.
         * @param {number} [projectId] 
         * @param {UpdateProjectDto} [updateProjectDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectUpdatePut: async (projectId?: number, updateProjectDto?: UpdateProjectDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Project/Update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (projectId !== undefined) {
                localVarQueryParameter['ProjectId'] = projectId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProjectDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectApi - functional programming interface
 * @export
 */
export const ProjectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Insere um novo item no banco de dados.
         * @param {InsertProjectDto} [insertProjectDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProjectCreatePost(insertProjectDto?: InsertProjectDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsertProjectDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProjectCreatePost(insertProjectDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectApi.apiProjectCreatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Exclui um item no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Deleta um item pelo ID.
         * @param {number} [projectId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProjectDeleteDelete(projectId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProjectDeleteDelete(projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectApi.apiProjectDeleteDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Esse endpoint retorna todos os registros da entidade representada.
         * @summary Retorna uma lista de todos os itens da entidade.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProjectGetAllGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ReadProjectDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProjectGetAllGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectApi.apiProjectGetAllGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [projectId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProjectGetApiInstancesGet(projectId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ReadApiInstanceDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProjectGetApiInstancesGet(projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectApi.apiProjectGetApiInstancesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Esse endpoint permite a busca de um item no banco de dados através de sua chave primária, fornecida em formato JSON. ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Retorna um item pelo ID.
         * @param {number} [projectId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProjectGetGet(projectId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReadProjectDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProjectGetGet(projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectApi.apiProjectGetGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Atualiza um item existente no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Altera informações de um item pelo ID.
         * @param {number} [projectId] 
         * @param {UpdateProjectDto} [updateProjectDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProjectUpdatePut(projectId?: number, updateProjectDto?: UpdateProjectDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProjectUpdatePut(projectId, updateProjectDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectApi.apiProjectUpdatePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProjectApi - factory interface
 * @export
 */
export const ProjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectApiFp(configuration)
    return {
        /**
         * 
         * @summary Insere um novo item no banco de dados.
         * @param {InsertProjectDto} [insertProjectDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectCreatePost(insertProjectDto?: InsertProjectDto, options?: RawAxiosRequestConfig): AxiosPromise<InsertProjectDto> {
            return localVarFp.apiProjectCreatePost(insertProjectDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Exclui um item no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Deleta um item pelo ID.
         * @param {number} [projectId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectDeleteDelete(projectId?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiProjectDeleteDelete(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Esse endpoint retorna todos os registros da entidade representada.
         * @summary Retorna uma lista de todos os itens da entidade.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectGetAllGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<ReadProjectDto>> {
            return localVarFp.apiProjectGetAllGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [projectId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectGetApiInstancesGet(projectId?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ReadApiInstanceDto>> {
            return localVarFp.apiProjectGetApiInstancesGet(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Esse endpoint permite a busca de um item no banco de dados através de sua chave primária, fornecida em formato JSON. ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Retorna um item pelo ID.
         * @param {number} [projectId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectGetGet(projectId?: number, options?: RawAxiosRequestConfig): AxiosPromise<ReadProjectDto> {
            return localVarFp.apiProjectGetGet(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Atualiza um item existente no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
         * @summary Altera informações de um item pelo ID.
         * @param {number} [projectId] 
         * @param {UpdateProjectDto} [updateProjectDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectUpdatePut(projectId?: number, updateProjectDto?: UpdateProjectDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiProjectUpdatePut(projectId, updateProjectDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectApi - object-oriented interface
 * @export
 * @class ProjectApi
 * @extends {BaseAPI}
 */
export class ProjectApi extends BaseAPI {
    /**
     * 
     * @summary Insere um novo item no banco de dados.
     * @param {InsertProjectDto} [insertProjectDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public apiProjectCreatePost(insertProjectDto?: InsertProjectDto, options?: RawAxiosRequestConfig) {
        return ProjectApiFp(this.configuration).apiProjectCreatePost(insertProjectDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Exclui um item no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
     * @summary Deleta um item pelo ID.
     * @param {number} [projectId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public apiProjectDeleteDelete(projectId?: number, options?: RawAxiosRequestConfig) {
        return ProjectApiFp(this.configuration).apiProjectDeleteDelete(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Esse endpoint retorna todos os registros da entidade representada.
     * @summary Retorna uma lista de todos os itens da entidade.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public apiProjectGetAllGet(options?: RawAxiosRequestConfig) {
        return ProjectApiFp(this.configuration).apiProjectGetAllGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [projectId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public apiProjectGetApiInstancesGet(projectId?: number, options?: RawAxiosRequestConfig) {
        return ProjectApiFp(this.configuration).apiProjectGetApiInstancesGet(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Esse endpoint permite a busca de um item no banco de dados através de sua chave primária, fornecida em formato JSON. ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
     * @summary Retorna um item pelo ID.
     * @param {number} [projectId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public apiProjectGetGet(projectId?: number, options?: RawAxiosRequestConfig) {
        return ProjectApiFp(this.configuration).apiProjectGetGet(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Atualiza um item existente no banco de dados através de sua chave primária fornecida em formato JSON.ID do item no formato JSON. O JSON deve conter as chaves primárias necessárias da entidade no seguinte formato:{ \"Chave1\": \"Valor1\",  \"Chave2\": \"Valor2\" }
     * @summary Altera informações de um item pelo ID.
     * @param {number} [projectId] 
     * @param {UpdateProjectDto} [updateProjectDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public apiProjectUpdatePut(projectId?: number, updateProjectDto?: UpdateProjectDto, options?: RawAxiosRequestConfig) {
        return ProjectApiFp(this.configuration).apiProjectUpdatePut(projectId, updateProjectDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoginUserDto} [loginUserDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserLoginUserPost: async (loginUserDto?: LoginUserDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User/LoginUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserRefreshTokenPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User/RefreshToken`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterUserDto} [registerUserDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserRegisterUserPost: async (registerUserDto?: RegisterUserDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User/RegisterUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {LoginUserDto} [loginUserDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserLoginUserPost(loginUserDto?: LoginUserDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserLoginUserPost(loginUserDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserLoginUserPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserRefreshTokenPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserRefreshTokenPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserRefreshTokenPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RegisterUserDto} [registerUserDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserRegisterUserPost(registerUserDto?: RegisterUserDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserRegisterUserPost(registerUserDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserRegisterUserPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {LoginUserDto} [loginUserDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserLoginUserPost(loginUserDto?: LoginUserDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiUserLoginUserPost(loginUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserRefreshTokenPost(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiUserRefreshTokenPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterUserDto} [registerUserDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserRegisterUserPost(registerUserDto?: RegisterUserDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiUserRegisterUserPost(registerUserDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {LoginUserDto} [loginUserDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserLoginUserPost(loginUserDto?: LoginUserDto, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserLoginUserPost(loginUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserRefreshTokenPost(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserRefreshTokenPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterUserDto} [registerUserDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserRegisterUserPost(registerUserDto?: RegisterUserDto, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserRegisterUserPost(registerUserDto, options).then((request) => request(this.axios, this.basePath));
    }
}



